// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "RCppMCMC_types.h"
#include <RcppGSL.h>
#include <Rcpp.h>

using namespace Rcpp;

// RCppMCMC
Rcpp::DataFrame RCppMCMC(Rcpp::List model, unsigned int burn_in, unsigned int iterations, unsigned int chains, unsigned int threads, bool verbose, unsigned long int seed);
RcppExport SEXP _RCppMCMC_RCppMCMC(SEXP modelSEXP, SEXP burn_inSEXP, SEXP iterationsSEXP, SEXP chainsSEXP, SEXP threadsSEXP, SEXP verboseSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type model(modelSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type burn_in(burn_inSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type iterations(iterationsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type chains(chainsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type threads(threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< unsigned long int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(RCppMCMC(model, burn_in, iterations, chains, threads, verbose, seed));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RCppMCMC_RCppMCMC", (DL_FUNC) &_RCppMCMC_RCppMCMC, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_RCppMCMC(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
